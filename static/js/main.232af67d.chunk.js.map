{"version":3,"sources":["translations/i18n.ts","interfaces/ActivityType.ts","components/MapView.tsx","components/AnimatedMapView.tsx","assets/arc-viewer-logo.png","components/DataFetcher.tsx","App.tsx","index.tsx"],"names":["i18n","use","LanguageDetector","initReactI18next","init","fallbackLng","debug","resources","de","en","interpolation","escapeValue","catch","error","console","warn","ActivityType","Unknown","Bogus","Stationary","Walking","Running","Cycling","Car","Airplane","Train","Bus","Motorcycle","Boat","Tram","Tractor","Tuktuk","Songthaew","Scooter","Metro","CableCar","Funicular","Chairlift","SkiLift","Taxi","Skateboarding","InlineSkating","Snowboarding","Skiing","Horseback","Swimming","Golf","Wheelchair","Rowing","Kayaking","getActivityColor","activityType","Color","hsl","initialViewState","longitude","latitude","zoom","MapView","data","pathData","filter","i","samples","length","map","item","color","rgb","array","name","startDate","path","s","location","undefined","sample","places","place","coordinates","center","layers","PathLayer","id","rounded","pickable","widthScale","widthMinPixels","getPath","d","getColor","getWidth","ScatterplotLayer","opacity","stroked","filled","radiusScale","radiusMinPixels","radiusMaxPixels","lineWidthMinPixels","getPosition","getRadius","getFillColor","getLineColor","width","height","controller","mapStyle","mapboxApiAccessToken","process","onLoad","timeEnd","AnimatedMapView","window","arc","t","useTranslation","useSuspense","useState","filteredData","setFilteredData","allSamples","setAllSamples","animationPaused","setPause","maxVal","setMaxVal","frameRate","setFrameRate","increment","setIncrement","hiddenControls","setHiddenControls","rangeVal","setRangeVal","useEffect","listener","e","key","addEventListener","removeEventListener","setTimeout","log","newMaxVal","reduce","p","c","flatMap","m","counter","counterBefore","idx","className","style","display","type","min","max","value","disabled","onChange","Number","parseInt","target","Math","round","colSpan","onClick","moment","date","format","valueOf","toISOString","x","y","DataFetcher","props","urls","ComponentToRender","component","setData","onDrop","useCallback","acceptedFiles","Promise","resolve","reject","droppedFileData","file","res","rej","reader","FileReader","time","JSON","parse","result","readAsText","all","then","arcDataSets","merged","timelineItems","fetchDataFromDrop","useDropzone","getRootProps","getInputProps","isDragActive","u","fetch","r","json","arr","flat","fetchDataFromURL","arcData","src","alt","ArcLogo","App","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.232af67d.chunk.js","sourcesContent":["import i18n from 'i18next';\nimport {initReactI18next} from 'react-i18next';\n\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nimport de from './de.json';\nimport en from './en.json';\n\ni18n.use(LanguageDetector)\n    .use(initReactI18next)\n    .init({\n        fallbackLng: 'en',\n        debug: true,\n\n        resources: {\n            de,\n            en,\n        },\n\n        interpolation: {\n            escapeValue: false,\n        },\n    })\n    .catch((error) => {\n        console.warn('Could not initialise translation services:', error);\n    });\n\n// eslint-disable-next-line import/no-default-export\nexport default i18n;\n","import Color from 'color';\n\nexport enum ActivityType {\n    // special types\n    Unknown = 'unknown',\n    Bogus = 'bogus',\n\n    // base types\n    Stationary = 'stationary',\n    Walking = 'walking',\n    Running = 'running',\n    Cycling = 'cycling',\n    Car = 'car',\n    Airplane = 'airplane',\n\n    // transport types\n    Train = 'train',\n    Bus = 'bus',\n    Motorcycle = 'motorcycle',\n    Boat = 'boat',\n    Tram = 'tram',\n    Tractor = 'tractor',\n    Tuktuk = 'tuktuk',\n    Songthaew = 'songthaew',\n    Scooter = 'scooter',\n    Metro = 'metro',\n    CableCar = 'cableCar',\n    Funicular = 'funicular',\n    Chairlift = 'chairlift',\n    SkiLift = 'skiLift',\n    Taxi = 'taxi',\n\n    // active types\n    Skateboarding = 'skateboarding',\n    InlineSkating = 'inlineSkating',\n    Snowboarding = 'snowboarding',\n    Skiing = 'skiing',\n    Horseback = 'horseback',\n    Swimming = 'swimming',\n    Golf = 'golf',\n    Wheelchair = 'wheelchair',\n    Rowing = 'rowing',\n    Kayaking = 'kayaking'\n}\n\nexport const ActivityTypes: Array<ActivityType> = [\n    // special types\n    ActivityType.Unknown,\n    ActivityType.Bogus,\n\n    // base types\n    ActivityType.Stationary,\n    ActivityType.Walking,\n    ActivityType.Running,\n    ActivityType.Cycling,\n    ActivityType.Car,\n    ActivityType.Airplane,\n\n    // transport types\n    ActivityType.Train,\n    ActivityType.Bus,\n    ActivityType.Motorcycle,\n    ActivityType.Boat,\n    ActivityType.Tram,\n    ActivityType.Tractor,\n    ActivityType.Tuktuk,\n    ActivityType.Songthaew,\n    ActivityType.Scooter,\n    ActivityType.Metro,\n    ActivityType.CableCar,\n    ActivityType.Funicular,\n    ActivityType.Chairlift,\n    ActivityType.SkiLift,\n    ActivityType.Taxi,\n\n    // active types\n    ActivityType.Skateboarding,\n    ActivityType.InlineSkating,\n    ActivityType.Snowboarding,\n    ActivityType.Skiing,\n    ActivityType.Horseback,\n    ActivityType.Swimming,\n    ActivityType.Golf,\n    ActivityType.Wheelchair,\n    ActivityType.Rowing,\n    ActivityType.Kayaking\n];\n\nexport const getActivityColor = (activityType: ActivityType): Color => {\n    switch (activityType) {\n        case ActivityType.Motorcycle:\n        case ActivityType.Scooter:\n            return Color.hsl(8, 74, 57);\n        case ActivityType.Running:\n            return Color.hsl(27, 84, 51);\n        case ActivityType.Tuktuk:\n        case ActivityType.Songthaew:\n            return Color.hsl(41, 72, 41);\n        case ActivityType.Tram:\n        case ActivityType.Train:\n        case ActivityType.SkiLift:\n        case ActivityType.Metro:\n        case ActivityType.Funicular:\n        case ActivityType.Chairlift:\n        case ActivityType.CableCar:\n            return Color.hsl(48, 55, 43);\n        case ActivityType.Walking:\n        case ActivityType.Wheelchair:\n        case ActivityType.Golf:\n            return Color.hsl(148, 80, 36);\n        case ActivityType.Skateboarding:\n            return Color.hsl(186, 76, 39);\n        case ActivityType.Cycling:\n        case ActivityType.Swimming:\n        case ActivityType.Rowing:\n        case ActivityType.Kayaking:\n            return Color.hsl(196, 97, 42);\n        case ActivityType.Snowboarding:\n            return Color.hsl(205, 41, 48);\n        case ActivityType.Boat:\n            return Color.hsl(223, 91, 60);\n        case ActivityType.Bus:\n            return Color.hsl(229, 48, 48);\n        case ActivityType.Skiing:\n            return Color.hsl(229, 57, 35);\n        case ActivityType.Car:\n        case ActivityType.Taxi:\n            return Color.hsl(231, 14, 36);\n        case ActivityType.Tractor:\n            return Color.hsl(233, 16, 21);\n        case ActivityType.Airplane:\n            return Color.hsl(277, 76, 47);\n        case ActivityType.Horseback:\n            return Color.hsl(277, 76, 47);\n        case ActivityType.InlineSkating:\n            return Color.hsl(339, 63, 59);\n        case ActivityType.Unknown:\n        case ActivityType.Bogus:\n        case ActivityType.Stationary:\n        default:\n            return Color.hsl(0, 0, 60);\n    }\n};\n","import {PathLayer, ScatterplotLayer} from '@deck.gl/layers';\nimport DeckGL from '@deck.gl/react';\nimport React from 'react';\nimport {StaticMap} from 'react-map-gl';\nimport {ActivityType, getActivityColor} from '../interfaces/ActivityType';\nimport {TimelineItem} from '../interfaces/ArcData';\n\nconst initialViewState = {\n    // Edinburgh\n    longitude: -3.195,\n    latitude: 55.94,\n    zoom: 13,\n};\n\nexport const MapView: React.FC<{ data: TimelineItem[] }> = ({data}: { data: TimelineItem[] }) => {\n    interface Path {\n        color: [number, number, number];\n        name: string;\n        path: Array<[number, number]>\n    }\n    const pathData: Array<Path> = data\n        .filter((i) => i.activityType && i.samples && i.samples.length > 0)\n        .map((item) => ({\n            color: getActivityColor(item.activityType as ActivityType)\n                .rgb()\n                .array() as [number, number, number],\n            name: item.startDate,\n\n            path: (item.samples ?? [])\n                .filter(\n                    (s) =>\n                        s &&\n                        s.location &&\n                        s.location.longitude !== undefined &&\n                        s.location.latitude !== undefined,\n                )\n                .map((sample) => [sample?.location?.longitude, sample?.location?.latitude] as [number, number]),\n        }));\n\n    interface Place {\n        name: string;\n        coordinates: [number, number];\n    }\n    const places = data\n        .filter((i) => i.place)\n        .map((i) => ({\n            name: i.place?.name ?? 'Stationary',\n            coordinates: [i.center.longitude, i.center.latitude],\n        }));\n    const layers = [\n        new PathLayer({\n            id: 'path-layer',\n            data: pathData,\n            rounded: true,\n            pickable: true,\n            widthScale: 1,\n            widthMinPixels: 5,\n            getPath: (d) => (d as Path).path,\n            getColor: (d) => (d as Path).color,\n            getWidth: () => 2,\n        }),\n        new ScatterplotLayer({\n            id: 'scatterplot-layer',\n            data: places,\n            pickable: true,\n            opacity: 0.8,\n            stroked: true,\n            filled: true,\n            radiusScale: 6,\n            radiusMinPixels: 1,\n            radiusMaxPixels: 8,\n            lineWidthMinPixels: 2,\n            getPosition: (d) => (d as Place).coordinates,\n            getRadius: () => 15,\n            getFillColor: () => [0, 69, 202],\n            getLineColor: () => [255, 255, 255],\n        }),\n    ];\n\n    return (\n        <DeckGL\n            width=\"100%\"\n            height=\"100%\"\n            initialViewState={initialViewState}\n            controller\n            layers={layers}\n        >\n            <StaticMap\n                mapStyle=\"mapbox://styles/mapbox/light-v10\"\n                width=\"100%\"\n                height=\"100%\"\n                mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                onLoad={() => console.timeEnd('time to first mapview render')}\n            />\n        </DeckGL>\n    );\n};\n","import moment from 'moment';\nimport 'moment-timezone';\nimport React, {useEffect, useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport './AnimatedMapView.scss';\nimport {Sample, TimelineItem} from '../interfaces/ArcData';\nimport {MapView} from './MapView';\n\nexport const AnimatedMapView: React.FC<{data: Array<TimelineItem>}> = ({data}: {\n    data: Array<TimelineItem>;\n}) => {\n    (window as typeof window & {arc: Array<TimelineItem>}).arc = data;\n\n    const {t} = useTranslation('mapview', {useSuspense: false});\n    const [filteredData, setFilteredData] = useState<Array<TimelineItem>>([]);\n    const [allSamples, setAllSamples] = useState<Array<Sample>>([]);\n    const [animationPaused, setPause] = useState(true);\n    const [maxVal, setMaxVal] = useState<number>(0);\n    const [frameRate, setFrameRate] = useState(33);\n    const [increment, setIncrement] = useState(50);\n    const [hiddenControls, setHiddenControls] = useState(false);\n\n    const [rangeVal, setRangeVal] = useState<number>(0);\n\n    useEffect(() => {\n        const listener = (e: KeyboardEvent) => {\n            if (e.key === 'h') {\n                setHiddenControls(!hiddenControls);\n            } else if (e.key === ' ') {\n                setPause(!animationPaused);\n            }\n        };\n        window.addEventListener('keydown', listener);\n\n        return () => {\n            window.removeEventListener('keydown', listener);\n        };\n    }, [animationPaused, hiddenControls]);\n\n    useEffect(() => {\n        if (!animationPaused) {\n            setTimeout(() => {\n                if (rangeVal + increment >= maxVal) {\n                    setRangeVal(0);\n                } else {\n                    setRangeVal(rangeVal + increment);\n                }\n            }, frameRate);\n        }\n    }, [rangeVal, animationPaused, frameRate, increment, maxVal]);\n\n    useEffect(() => {\n        console.log(data);\n        if (data.length > 0) {\n            setFilteredData(data);\n            const newMaxVal =\n                data.filter((d) => !d.place).reduce((p, c) => p + (c.samples?.length ?? 0), 0) - 1;\n            setMaxVal(newMaxVal);\n            setRangeVal(newMaxVal);\n            setAllSamples(\n                data\n                    .filter((d) => !d.place)\n                    .flatMap((m) => m.samples ?? []),\n            );\n        }\n    }, [data]);\n\n    useEffect(() => {\n        let counter = 0;\n        setFilteredData(\n            data\n                .filter((d) => !d.place)\n                .map((d) => {\n                    const counterBefore = counter;\n                    counter += d.samples?.length ?? 0;\n                    if (rangeVal > counter) {\n                        return d;\n                    }\n                    const idx = rangeVal - counterBefore;\n                    if (idx > (d.samples?.length ?? 0)) {\n                        return {...d, samples: []};\n                    }\n\n                    return {...d, samples: d.samples?.filter((s, i) => i < idx) ?? []};\n\n                }),\n        );\n    }, [rangeVal, data]);\n\n    const handleOnClick = () => {\n        setPause(!animationPaused);\n\n        return false;\n    };\n\n    return (\n        <div className=\"App\">\n            <div className=\"controls\" style={{display: hiddenControls ? 'none' : 'block'}}>\n                <table>\n                    <thead/>\n                    <tbody>\n                    <tr>\n                        <td>{t('animation.frames_per_second')}:</td>\n                        <td>\n                            <input\n                                type=\"range\"\n                                min={17}\n                                max={1000}\n                                value={frameRate}\n                                disabled={!animationPaused}\n                                onChange={(e) => setFrameRate(Number.parseInt(e.target.value, 10))}\n                            />\n                        </td>\n                        <td>{Math.round(1000 / frameRate)}</td>\n                    </tr>\n                    <tr>\n                        <td>{t('animation.sample_increment_per_frame')}:</td>\n                        <td>\n                            <input\n                                type=\"range\"\n                                min={1}\n                                max={2000}\n                                value={increment}\n                                disabled={!animationPaused}\n                                onChange={(e) => setIncrement(Number.parseInt(e.target.value, 10))}\n                            />\n                        </td>\n                        <td>{increment}</td>\n                    </tr>\n                    <tr>\n                        <td colSpan={3}>\n                            <button className=\"button\" onClick={handleOnClick} type=\"button\">\n                                {animationPaused ? t('animation.play') : t('animation.pause')}\n                            </button>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td colSpan={3}>{t('animation.info')}</td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div className=\"timeline\" style={{display: hiddenControls ? 'none' : 'block'}}>\n                <div className=\"currentDate\">\n                    {moment(allSamples[rangeVal]?.date).format('dddd, DD.MM.YYYY HH:mm')} -{' '}\n                    {moment(allSamples[rangeVal]?.date).valueOf()} -{' '}\n                    {moment(allSamples[rangeVal]?.date).toISOString()}\n                </div>\n                {/* {renderActivityTimeline()} */}\n                {/* <ActivityTimeline data={data} /> */}\n                <input\n                    type=\"range\"\n                    min={0}\n                    max={maxVal}\n                    value={rangeVal}\n                    disabled={!animationPaused}\n                    onChange={(e) => setRangeVal(Number.parseInt(e.target.value, 10))}\n                />\n                <div className=\"date-range\">\n                    <p>{moment(allSamples[0]?.date).format('DD.MM.YYYY')}</p>\n                    <p>{t('sample_1_to_x_of_y', {x: rangeVal + 1, y: maxVal + 1})}</p>\n                    <p>{moment(allSamples[allSamples.length - 1]?.date).format('DD.MM.YYYY')}</p>\n                </div>\n            </div>\n            <MapView data={filteredData}/>\n        </div>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/arc-viewer-logo.e6796b8f.png\";","import React, {ComponentType, useCallback, useEffect, useState, VoidFunctionComponent} from 'react';\nimport {useDropzone} from 'react-dropzone';\nimport {useTranslation} from 'react-i18next';\nimport {ArcData, TimelineItem} from '../interfaces/ArcData';\nimport ArcLogo from '../assets/arc-viewer-logo.png';\nimport './DataFetcher.scss';\n\nfunction fetchDataFromURL(urls: string[]) {\n    return Promise.all(\n        urls.map((u) =>\n            fetch(u)\n                .then((r) => r.json())\n                .then((d) => d.timelineItems)\n        )\n    ).then(\n        (arr) =>\n            ({\n                timelineItems: arr.flat()\n            } as ArcData)\n    );\n}\n\nfunction fetchDataFromDrop(acceptedFiles: Array<File>): Promise<TimelineItem[]> {\n    return new Promise((resolve, reject) => {\n        try {\n            const droppedFileData: Array<Promise<ArcData>> = acceptedFiles.map(\n                (file) =>\n                    new Promise((res, rej) => {\n                        const reader = new FileReader();\n                        reader.addEventListener('abort', rej);\n                        reader.addEventListener('error', rej);\n                        reader.addEventListener('load', () => {\n                            try {\n                                console.timeEnd(`reading file ${file.name}`);\n                                console.time(`parsing file ${file.name}`);\n                                const data = JSON.parse(reader.result as string);\n                                console.timeEnd(`parsing file ${file.name}`);\n                                res(data as ArcData);\n                            } catch (error) {\n                                rej(error);\n                            }\n                        });\n                        reader.readAsText(file);\n                        console.time(`reading file ${file.name}`);\n                    })\n            );\n            Promise.all(droppedFileData).then((arcDataSets: Array<ArcData>) => {\n                console.time('merging dataset');\n                const merged = arcDataSets\n                    .flatMap((d) => d.timelineItems);\n                console.timeEnd('merging dataset');\n                console.time('time to first mapview render');\n                resolve(merged);\n            });\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n\nexport interface ComponentWithDataProps {\n    data: Array<TimelineItem>\n}\n\nexport interface DataFetcherProps {\n    urls?: Array<string>;\n    component: ComponentType<ComponentWithDataProps>;\n}\n\nexport const DataFetcher: VoidFunctionComponent<DataFetcherProps> = (props) => {\n    const {urls, component: ComponentToRender} = props;\n    const {t} = useTranslation('data_fetcher');\n    const [data, setData] = useState<TimelineItem[]>([]);\n\n    const onDrop = useCallback((acceptedFiles) => {\n        fetchDataFromDrop(acceptedFiles).then(setData);\n    }, []);\n\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop});\n\n    useEffect(() => {\n        if (urls) {\n            fetchDataFromURL(urls).then((arcData) => {\n                setData(arcData.timelineItems ?? []);\n            });\n        } else {\n            setData([]);\n        }\n    }, [urls]);\n\n    if (data.length === 0 && !urls) {\n        return (\n            <div className=\"page-background\">\n                <div className=\"dropzone\" {...getRootProps()}>\n                    <img src={ArcLogo} alt=\"\" />\n                    <h3>{t('welcome')}</h3>\n                    <h1>Arc Viewer</h1>\n                    <input {...getInputProps()} />\n                    {isDragActive ? <p>{t('info_while_dragging')}</p> : <p>{t('info')}</p>}\n                </div>\n            </div>\n        );\n    }\n\n    if (data.length === 0 && urls) {\n        return (\n            <div className=\"page-background\">\n                <div className=\"dropzone\">\n                    <img src=\"../assets/arc-viewer-logo.png\" alt=\"\" />\n                    <h3>{t('welcome')}</h3>\n                    <h1>Arc Viewer</h1>\n                    <p>{t('loading')}</p>\n                </div>\n            </div>\n        );\n    }\n\n    return <ComponentToRender data={data}/>;\n};\n","import React, {FC} from 'react';\nimport {AnimatedMapView} from './components/AnimatedMapView';\nimport {DataFetcher} from './components/DataFetcher';\n\nexport const App: FC = () => (\n    <DataFetcher component={AnimatedMapView} />\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './translations/i18n';\nimport {App} from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.querySelector('#root'),\n);\n"],"sourceRoot":""}